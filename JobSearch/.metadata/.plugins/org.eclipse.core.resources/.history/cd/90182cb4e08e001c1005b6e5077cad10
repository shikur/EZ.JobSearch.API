package com.Ez.JobSearch.JobSearch.rest;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.Ez.JobSearch.JobSearch.Repositories.ClientCVRepository;
import com.Ez.JobSearch.JobSearch.Services.ClientServices;
import com.Ez.JobSearch.JobSearch.model.ClientCV;

@RequestMapping("/api/v1")
@RestController
public class ClientCVController {
	
	@Autowired
    private ClientCVRepository clientCVRepository;

    @Autowired
    private ClientServices clientServices;

    @GetMapping("/getcv")
    public List<ClientCV> getAllEmployees() {
        return clientCVRepository.findAll();
    }
    
    
    @PostMapping("/employees")
    public ClientCV createClientCV(@Valid @RequestBody ClientCV employee) {
        employee.setId(clientServices.generateSequence(employee.SEQUENCE_NAME));
        return clientCVRepository.save(employee);
    }

//    @PutMapping("/employees/{id}")
//    public ResponseEntity<ClientCV > updateEmployee(@PathVariable(value = "id") Long employeeId,
//        @Valid @RequestBody ClientCV employeeDetails) throws ResourceNotFoundException {
//    	ClientCV clientCV = ClientCVRepository.findById(employeeId).orElseThrow(()-> new ResourceNotFoundException("ClientCV not found for this id :: " + employeeId));
//
//        employee.setEmailId(employeeDetails.getEmailId());
//        employee.setLastName(employeeDetails.getLastName());
//        employee.setFirstName(employeeDetails.getFirstName());
//        final Employee updatedEmployee = employeeRepository.save(employee);
//        return ResponseEntity.ok(updatedEmployee);
//    }

}
